import "./_export-product.scss";

import * as FileSaver from "file-saver";
import * as XLSX from "xlsx";

import { useAppDispatch, useAppSelector } from "@/hooks/redux-hooks";

import { setExportActivity, updateProductMark } from "@/store/slices/dataSlice";

import { timestampToString } from "@/shared/helpers/parse-date";

import { BsFiletypeXls } from "react-icons/bs";

import { FilteredProducts } from "@/pages/products/filtered-products";

export const ExportProduct = () => {
  const dispatch = useAppDispatch();

  const user = useAppSelector((state) => state.user);
  const products = useAppSelector((state) => state.data.products);
  const { category, exported } = useAppSelector((state) => state.data.filter);

  const fileType =
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8";
  const fileExtension = ".xlsx";

  const exportToCSV = (apiData: any[], fileName: string) => {
    const ws = XLSX.utils.json_to_sheet(apiData);
    const wb = { Sheets: { data: ws }, SheetNames: ["data"] };
    const excelBuffer = XLSX.write(wb, { bookType: "xlsx", type: "array" });
    const data = new Blob([excelBuffer], { type: fileType });
    FileSaver.saveAs(data, fileName + fileExtension);
  };

  const exportData =
    products &&
    FilteredProducts(products, category, exported).map(
      ({ name, code, quantity, dates, actions }) => ({
        –ò–º—è: name,
        –®—Ç—Ä–∏—Ö–∫–æ–¥: code,
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: quantity,
        –°–æ–∑–¥–∞–Ω: dates.createdAt
          ? timestampToString(dates.createdAt)
          : timestampToString(actions.updated.updatedAt),
        –ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω: timestampToString(dates.mfd),
        –ü—Ä–æ—Å—Ä–æ—á–∏—Ç—Å—è: timestampToString(dates.exp),
        –°—Ç–∞—Ç—É—Å: actions.exported.isExported ? "–í–Ω–µ—Å—ë–Ω" : "–ù–µ –≤–Ω–µ—Å—ë–Ω",
      })
    );

  const setProductMark = async () => {
    try {
      exportToCSV(
        exportData,
        `${category} ${
          exported === "–í—Å–µ" ? "üôå" : exported === true ? "üëç" : "üëé"
        } `
      );

      const allId = FilteredProducts(products, category, exported).map(
        (product) => product.id
      );

      for (const id of allId) {
        await dispatch(updateProductMark({ id, user }));
      }

      await dispatch(setExportActivity(user));
    } catch (e) {
      console.log(`SET PRODUCT MARK`, e);
    }
  };

  return (
    <div className="export-product">
      <h3>–≠–∫—Å–ø–æ—Ä—Ç Excel —Ñ–∞–π–ª–∞</h3>

      <BsFiletypeXls />
      <p>
        –í–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Ñ–∞–π–ª–∞, –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—É—á–∞—Ç —Å—Ç–∞—Ç—É—Å
        &apos;–í–Ω–µ—Å—ë–Ω&apos;
      </p>
      <button
        onClick={
          user.email === "willstesi@gmail.com" && "marinulik.85@mail.ru"
            ? () => setProductMark()
            : () =>
                exportToCSV(
                  exportData,
                  `${category} ${
                    exported === "–í—Å–µ" ? "üôå" : exported === true ? "üëç" : "üëé"
                  } `
                )
        }
      >
        –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
      </button>
    </div>
  );
};
